"use strict";function n(n){return n&&"object"==typeof n&&"default"in n?n.default:n}var e=require("apollo-server-lambda"),t=n(require("uuid/v4")),i=n(require("aws-sdk"));let r=new i.DynamoDB.DocumentClient;"dev"===process.env.STAGE&&(r=new i.DynamoDB.DocumentClient({region:"localhost",endpoint:`http://localhost:${process.env.DYNAMODB_PORT}`,accessKeyId:"DEFAULT_ACCESS_KEY",secretAccessKey:"DEFAULT_SECRET"}));let a=process.env.RECIPE_TABLE;const o=n=>new Promise((e,t)=>{n((n,i)=>{n?t(n):e(i)})}),p={Query:{recipe:async(n,{id:e})=>{var t,i;return null===(i=null===(t=await o(n=>{const t={TableName:a,KeyConditionExpression:"id = :recipeId",ExpressionAttributeValues:{":recipeId":e}};r.query(t,n)}))||void 0===t?void 0:t.Items)||void 0===i?void 0:i[0]},recipes:async()=>{var n;return null===(n=await o(n=>{const e={TableName:a};r.scan(e,n)}))||void 0===n?void 0:n.Items}},Mutation:{createRecipe:async(n,{recipe:e},i)=>{const p=Object.assign({id:t(),createdAt:(new Date).toISOString(),author:i.user.name},e);return await o(n=>{const e={TableName:a,Item:p};r.put(e,n)}),p}}},s=async({requestContext:{authorizer:n}})=>{if(n){const n={name:"Panayiotis"};if(n)return n}return null},g=new e.ApolloServer({typeDefs:"\n  input RecipeInput {\n    name: String!\n    image: String\n    preparationTime: Int\n    cookingTime: Int\n    portions: String\n    difficulty: String\n    ingredients: [IngredientInput]\n    items: [ItemInput]\n    steps: [StepInput]\n  }\n\n  input IngredientInput {\n    qty: String!\n    name: String!\n    notes: String\n    link: String\n  }\n\n  input ItemInput {\n    qty: String!\n    name: String!\n    notes: String\n    link: String\n  }\n\n  input LinkInput {\n    heading: String\n    name: String!\n    from: Int!\n    timerId: String\n  }\n\n  input TagInput {\n    text: String!\n    color: String!\n  }\n\n  input ImageInput {\n    src: String\n    alt: String\n  }\n\n  input TimerInput {\n    id: String!\n    name: String!\n    minutes: Int!\n    seconds: Int!\n  }\n\n  input StepInput {\n    no: Int\n    type: StepType!\n    links: [LinkInput]\n    tag: TagInput\n    items: [ItemInput]\n    ingredients: [IngredientInput]\n    tasks: [String]\n    images: [ImageInput]\n    timer: TimerInput\n  }\n\n  type Recipe {\n    id: String\n    author: String\n    createdAt: String\n    name: String\n    image: String\n    preparationTime: Int\n    cookingTime: Int\n    portions: String\n    difficulty: String\n    ingredients: [Ingredient]\n    items: [Item]\n    steps: [Step]\n  }\n\n  type Ingredient {\n    qty: String\n    name: String\n    notes: String\n    link: String\n    from: Int\n  }\n\n  type Item {\n    qty: String\n    name: String\n    notes: String\n    link: String\n  }\n\n  enum StepType {\n    MISE_EN_PLACE\n    PREPARATION\n  }\n\n  type Step {\n    no: Int\n    type: StepType\n    links: [Link]\n    tag: Tag\n    items: [Item]\n    ingredients: [Ingredient]\n    tasks: [String]\n    images: [Image]\n    timer: Timer\n  }\n\n  type Link {\n    heading: String\n    name: String!\n    from: String!\n    timerId: String\n  }\n\n  type Tag {\n    text: String!\n    color: String!\n  }\n\n  type Image {\n    src: String!\n    alt: String\n  }\n\n  type Timer {\n    id: String!\n    name: String!\n    minutes: Int!\n    seconds: Int!\n  }\n\n  type Query {\n    recipes: [Recipe!]!\n    recipe(id: String!): Recipe!\n  }\n\n  type Mutation {\n    createRecipe(recipe: RecipeInput!): Recipe!\n  }\n\n  type schema {\n    query: Query\n    mutation: Mutation\n  }\n",resolvers:p,formatError:n=>(console.log(n),n),formatResponse:n=>(console.log(n),n),context:async({event:n,context:e})=>({headers:n.headers,functionName:e.functionName,event:n,context:e,user:await s(n)}),playground:{endpoint:"prod"===process.env.STAGE?"/prod/graphql":"/dev/graphql"},tracing:!0});exports.graphqlHandler=g.createHandler({cors:{origin:"*"}});
